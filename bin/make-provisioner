#!/usr/bin/env perl

# https://github.com/sapphirecat/fedora-pack
#
# Self-extracting Packer shell provisioners for Linux
# Copyright (C) 2014 Sapphire Cat <https://github.com/sapphirecat>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use 5.010;
use mro 'c3';
use strict;
use warnings;

eval 'use IO::File (); use IO::Handle ();' if $] < 5.014;
use FindBin ();

{
	BEGIN {
		my $mod_tail = join('/', split(/::/, "App::FedoraPack::System.pm"));
		$::INC{$mod_tail} = $0;
	}
package App::FedoraPack::System;

use 5.010;
use mro 'c3';
use strict;
use warnings;

use Cwd qw(abs_path);
use File::Spec::Functions qw(catfile splitpath splitdir abs2rel file_name_is_absolute);
use List::Util qw(max);

my $sys = {};
my $feature = {};

# Given a system and versions it handles, register the invoked module as
# providing them all.  Called in System::X as __PACKAGE__->register().
sub register {
	my ($cls, $name, $versions_aref) = @_;
	die q{Call __PACKAGE__->register($name, \\@versions) while loading a System subclass} if ref $cls;
	for my $v (@$versions_aref) {
		$sys->{$name}{$v} = $cls;
	}

	return $cls;
}

sub is_system {
	return exists($sys->{$_[1]});
}

sub is_system_version {
	return exists($sys->{$_[1]}) && exists($sys->{$_[1]}{$_[2]});
}

# Return all registered systems for command-line parsing.
sub get_systems {
	return [ keys %$sys ];
}

# Return the registered versions for a given system.
sub get_versions {
	my $copy = {};
	for my $n (keys %$sys) {
		$copy->{$n} = [ keys %{ $sys->{$n} } ];
	}
	return $copy;
}

# Resolve a (system, version) pair to a registered module name.
sub get_module {
	my ($cls, $s_name, $version) = @_;
	die "No such system: $s_name" unless $sys->{$s_name};

	$version ||= max(keys %{$sys->{$s_name}});

	if (my $mod = $sys->{$s_name}{$version}) {
		return $mod;
	}

	die "No such version for system $s_name: $version";
}

# Given the (system, version) args, find the module registered for it, and
# build an instance of that module.
sub get_new {
	my ($cls, @args) = @_;
	return $cls->get_module(@args)->new(@args);
}


sub register_feature {
	my ($mod, $name, $handler) = @_;

	die "Feature already registered: $name" if exists $feature->{$name};
	$feature->{$name} = $handler;

	return $mod;
}

sub is_feature {
	return exists($feature->{$_[1]});
}

sub get_features {
	return [ keys %$feature ];
}



# Return a new object recording the (system, version) args -- normally, the
# values passed to get_new that resolved the App::FedoraPack::System::* module
# being called here.  (Sorry, it's weird.)
#
# tl;dr: use App::FedoraPack::System->get_new() instead of this.
sub new {
	my ($mod, $s_name, $version) = @_;
	my $self = {
		system => $s_name,
		version => $version,
		# for generating paths for the *target* system to interpret, see our
		# host_catfile etc. methods
		filespec => 'File::Spec::Unix',

		pre_scripts => [],
		packages => [],
		scripts => [],
		binaries => {},

		targets => [],
		target_scripts => [],

		enabled => {}, # enabled languages/features/etc.
	};
	bless $self, $mod;
}

sub _add {
	my ($self, $kind, @items) = @_;
	push(@{ $self->{$kind} }, @items);
	return $self;
}

# Add a directory to bundle
sub add_targets {
	my $self = shift;
	$self->_add('targets', @_);
}


# Add to the list of packages to install from the package manager
sub add_installs {
	my $self = shift;
	$self->_add('packages', @_);
}

# Add to the list of bash commands to run after the package manager
sub add_scripts {
	my $self = shift;
	$self->_add('scripts', @_);
}

# add scripts to run before the package manager
sub add_pre_scripts {
	my $self = shift;
	unshift(@{ $self->{pre_scripts} }, @_); # not _add(): we don't want to push()
}


sub host_catfile {
	my $self = shift;
	$self->{filespec}->catfile(@_);
}

sub host_catdir {
	my $self = shift;
	$self->{filespec}->catdir(@_);
}

sub splitpath_and_dirs {
	my ($self, $thing, $no_file) = @_;

	my ($vol, $path, $file) = splitpath($thing, $no_file);
	my (@dirs) = splitdir($path);
	# splitpath doesn't yield clean paths, confusing splitdir... drop any
	# `undef` entries from the resulting array
	@dirs = map { $_ // () } @dirs;

	return ($vol, [ @dirs ], $file);
}


# Locate a script within a target directory; the script may be given as
# relative to the target; or, if the path resolves within the target, as
# relative to CWD or as an absolute path.  Returns two values: the target dir,
# and the path relative to it.
sub resolve_target_script {
	my ($self, $script) = @_;

	die "Cannot resolve script $script without bundle dir set" unless @{ $self->{targets} };

	my $is_valid = sub {
		return 0 if file_name_is_absolute($_[0]);
		return -e catfile($_[1], $_[0]);
	};
	for my $rootpath (@{ $self->{targets} }) {
		# If it's already relative to the root, return it immediately.
		return ($rootpath, $script) if $is_valid->($script, $rootpath);

		# See if it's an absolute path or relative-to-CWD path that points into
		# the root.  If so, return the relative-to-the-root conversion of it.
		my $rel_script = abs2rel($script, $rootpath);
		return ($rootpath, $rel_script) if $is_valid->($rel_script, $rootpath);
	}

	# Try to give out unambiguous (if possibly confusing) diagnostics.
	die "Script $script seems to be outside of bundle dir" if -e $script;
	die "Cannot resolve script $script relative to bundle dir or CWD";
}

# From a script filename, guess its language
sub resolve_script_lang {
	my ($self, $file, $in_dir) = @_;

	return 'perl' if $file =~ /\.pl$/;
	return 'php' if $file =~ /\.ph(?:p|ar)$/; # php|phar
	return 'bash' if $file =~ /\.(?:ba)?sh$/; # bash|sh
	# TODO: use $in_dir to guess based on the script content (e.g. shebang)
	return 'python2' if $file =~ /\.py$/;
}

# Generate a [ $interpreter, @options, $tarball_path ] for the given language,
# script, and root_dir.  Dies on unknown languages or unacceptable scripts.
sub cmdline_for_script {
	my $self = shift;
	my ($lang, $script, $root_dir) = @_;
	my ($basedir, $bin);

	my ($vol, $dirs, $file) = $self->splitpath_and_dirs($root_dir, 1);
	$basedir = scalar @$dirs ? pop @$dirs : 'NO_DIRS_WTF';
	($vol, $dirs, $file) = $self->splitpath_and_dirs($script);

	$bin = $self->{binaries}{$lang};
	die "No binary loaded for language $lang" unless $bin;

	if ($lang =~ /^python/ && -d catdir($root_dir, $script)) {
		return [ $bin, $self->host_catdir($basedir, @$dirs, $file) ] if -e catfile($root_dir, $script, '__main__.py');
	} elsif (-f catfile($root_dir, $script)) {
		return [ $bin, $self->host_catfile($basedir, @$dirs, $script) ];
	}
}

# Add programs to run in target directory
sub add_target_scripts {
	my $self = shift;
	my @scripts;

	for my $script (@_) {
		my ($lang, $in_dir, $relscript, $cmd);

		if ($script =~ /^(\w+),(.*)$/) {
			$lang = $1;
			$script = $2;
		}

		($in_dir, $relscript) = $self->resolve_target_script($script);
		$lang ||= $self->resolve_script_lang($relscript, $in_dir);

		my $addlang = "feature_$lang";
		$self->$addlang() unless $self->{enabled}{$lang};
		my $cmdline = $self->cmdline_for_script($lang, $relscript, $in_dir);
		push(@scripts, $cmdline);
	}

	$self->_add('target_scripts', @scripts);
}


# Convert installs and scripts to bash commands (running as user)
sub make_install {
	my ($self) = @_;
	return join("\n",
		@{ $self->{pre_scripts} },
		$self->make_install_cmd($self->{packages}),
		@{ $self->{scripts} },
	);
}

sub get_target_dirs {
	$_[0]->{targets};
}

sub get_target_script_cmds {
	$_[0]->{target_scripts};
}

# Given a (name, version_provided, version_wanted, package_list_aref), checks
# that the version_wanted does not exceed version_provided, then requests
# installation of the package_list_aref.  Dies (using name in the error) if
# the version check fails.
sub _add_install_version {
	my ($self, $name, $binary, $v_avail, $v_want, $pkgset) = @_;
	if (defined($v_want) && $v_avail < $v_want) {
		die "$name: requested version $v_want but system only has $v_avail";
	}
	$self->{binaries}{$name} = $binary;
	$self->add_installs(@$pkgset);
}

# 'protected': given a name and version wanted, call _provides_name and
# _pkgs_name to find the version provided and package list; then, install the
# packages if the version requirement is met.  Returns the name as the binary
# to invoke the main interpreter of the package; or if given an optional
# binary, returns that instead.
sub _installer {
	my ($self, $name, $want_version, $binary) = @_;
	$binary = $name unless defined $binary;

	my ($provides, $packages) = ("_provides_$name", "_pkgs_$name");
	$self->_add_install_version($name, $binary, $self->$provides, $want_version,
		$self->$packages);

	return $binary;
}


# Install composer via shell commands
# TODO: have an option to use pre-downloaded composer.phar
sub add_php_composer {
	my ($self) = @_;
	my $script = <<SHELL;
php -r "readfile('https://getcomposer.org/installer');" | php
sudo install -m 0755 -o root -g root composer.phar /usr/bin/composer
SHELL
	$self->add_scripts($script);
}


sub feature_bash {
	my ($self) = shift;
	# Considered essential in Debian, default in Fedora; nothing to install
	$self->{binaries}{bash} ||= 'bash';
	return 'bash';
}

sub feature_perl {
	my ($self, $version) = @_;
	$self->_installer(perl => $version);
}

sub feature_php {
	my ($self, $version) = @_;
	my $rv = $self->_installer(php => $version);
	$self->add_php_composer;
	return $rv;
}

sub feature_python2 {
	my ($self, $version) = @_;
	$self->_installer(python2 => $version, 'python');
}

sub feature_python3 {
	my ($self, $version) = @_;
	$self->_installer(python3 => $version);
}

1;
}
{
	BEGIN {
		my $mod_tail = join('/', split(/::/, "App::FedoraPack::cli.pm"));
		$::INC{$mod_tail} = $0;
	}
package App::FedoraPack::cli;

use 5.010;
use mro 'c3';
use strict;
use warnings;

use Archive::Tar ();
use Archive::Tar::Constant qw(SYMLINK DIR);
use File::Basename qw(basename dirname);
use File::Find qw(find);
use File::Spec::Functions qw(abs2rel rel2abs catfile);
use IO::Compress::Gzip ();

use App::FedoraPack::System ();

our $VERSION = '0.7.0';


my ($sys, $sysver);


sub usage {
	my ($cls, $err) = @_;
	my $code = 0;

	if (defined $err) {
		select(STDERR);
		$code = 2;

		print $err, "\n\n";
	}

	my $name = basename($0);
	print <<USAGE;
Usage: $name --system-SYS=VER [features ...]

Please see 'perldoc $name' for more information on available features
and options.

USAGE

	exit $code;
}

sub version {
	my $name = basename($0);
	say "$name version $VERSION";
	if (defined $::VERSION) {
		say "running from main package version $VERSION";
	}
	exit(0);
}


sub parse_sysver {
	my ($cls, $s, $v) = @_;

	$cls->usage("Multiple systems specified: $sys and $s") if defined $sys;
	$cls->usage("$s requires a version") unless defined $v;
	$cls->usage("Unknown system $s") unless App::FedoraPack::System->is_system($s);
	$cls->usage("Unknown version $v for system $s") unless App::FedoraPack::System->is_system_version($s, $v);

	($sys, $sysver) = ($s, $v);
}

sub parse_cmdline {
	my ($cls, $argv, $out_fh_ref) = @_;
	my (@features, @scripts);

	# We want dynamic options (--system-f is valid if System::F is loadable), so
	# we parse them ourselves instead of using Getopt::Long.
	my ($ptr, $max, $inc) = (0, $#$argv);
	while ($ptr <= $max) {
		my $arg;
		$_ = $argv->[$ptr];
		$inc = 1; # number of arguments to consume
		($inc, $arg) = (2, $argv->[$ptr + 1]) if $ptr < $max;

		# hit a non-option
		if ($_ eq '--') {
			++$ptr; # move past explicit end-of-options flag
			last;
		} elsif (! /^--/) {
			last;
		}

		# parse --option[=value] -> option in $_, value in $arg, $inc reduced if
		# this option had the value bundled in.
		s/^--//;
		if (/^([-a-z0-9]+)=(.*)$/) {
			($inc, $_, $arg) = (1, $1, $2);
		} elsif (defined($arg) && $arg =~ /^--/) {
			($inc, $arg) = (1);
		}

		# parse actual option/arg pair
		$cls->usage() if /^help$/i || $_ eq '?';
		$cls->version() if /^version$/;
		$cls->parse_sysver($1, $arg), next if /^system-([a-z0-9]+)$/;
		if (/^save-as$/) {
			$cls->arg_error("--save-as requires an argument") unless defined $arg;
			open(my $ofh, '>:utf8', $arg) or die "Can't open save-as file $arg: $^E";
			$$out_fh_ref = $ofh;
			next;
		}
		if (/^exec$/) {
			$cls->usage("--exec requires an argument") unless defined $arg;
			push(@scripts, $arg);
			next;
		}
		# defer all feature processing so the System object can do it
		push(@features, [ $_, $arg ]);

	} continue {
		# advance pointer
		$ptr += $inc;
	}

	$cls->usage("No system specified") unless defined $sys;
	my $rv = App::FedoraPack::System->get_new($sys, $sysver);

	# consume the arguments we have processed
	splice(@ARGV, 0, $ptr);

	# perform deferred feature processing via the System
	for my $feat_desc (@features) {
		my ($feat, $arg) = @$feat_desc;
		$feat =~ s/\W/_/g;
		my $feat_method = "feature_$feat";
		$rv->$feat_method($arg) if $rv->is_feature($feat);
	}

	# add in the bundle dirs
	$cls->usage("No directory given to bundle") unless @ARGV;
	my $dirset = {};
	for my $dir (@ARGV) {
		$cls->usage("Not a directory, can't bundle: $dir") unless -d $dir;

		my $bn = basename($dir);
		# instead of 'pack/*', let's bundle everything at the toplevel and reserve
		# /_* for any metadata we may want to add in the future.
		$cls->usage("Underscore prefix is reserved ($bn), can't add $dir") if $bn =~ /^_/;
		$cls->usage("Basename collision: $bn already bundled, can't add $dir") if $dirset->{$bn};
		$dirset->{$bn} = 1;
	}
	$rv->add_targets(@ARGV);

	# set scripts
	$cls->usage("No target (post-install) scripts specified") unless @scripts;
	$rv->add_target_scripts(@scripts) if @scripts;

	return $rv;
}



sub get_guest_sh_in {
	return <<'GUEST_SH';
#!/usr/bin/env bash
[ -z $FEDORAPACK_DEBUG ] || set -x
set -e

FEDORAPACK_TAR_DIR="/var/local/fedora-pack"

# find ourselves
self_file="$0"
[ -e "$self_file" ] || self_file="$(command -v "$self_file" 2>/dev/null)"
cut_line=$(( `grep -an '^#END_STAGE1$' "$self_file" | cut -d: -f1` + 1 ))
if [ "$cut_line" -le 1 ] ; then
	echo "Cannot find '#END_STAGE1' line - extraction failed" >&2
	exit 1
fi

# make absolute
[ "$(echo "$self_file" | cut -c1)" == / ] || \
	self_file="$(pwd -P)/$self_file"

# exec payloads in workdir
sudo install -d -m 0700 -o `id -un` -g `id -gn` "$FEDORAPACK_TAR_DIR"
cd "$FEDORAPACK_TAR_DIR"
@PACKAGE_SCRIPT@

tail -n +$cut_line "$self_file" | tar zxf -
export FEDORAPACK_TAR_DIR
@RUNNER_SCRIPTS@

# Magic token so that we don't hardcode any line-numbers.
#END_STAGE1
GUEST_SH
}

sub quote_cmdline {
	my ($cls, $cmd) = @_;
	my @out = ();
	for (@$cmd) {
		s/'/'\\''/g;
		push(@out, "'$_'");
	}

	return join(' ', @out);
}

sub generate_guest_stub {
	my ($cls, $sys, $out_fh) = @_;
	my $guest_sfx = $cls->get_guest_sh_in();

	{ my $inst = $sys->make_install;
		$guest_sfx =~ s/\@PACKAGE_SCRIPT\@/$inst/g; }

	{ my $cmds = $sys->get_target_script_cmds;
		my $txt = join("\012", map { $cls->quote_cmdline($_) } @$cmds);
		$guest_sfx =~ s/\@RUNNER_SCRIPTS\@/$txt/g; }

	$out_fh->print($guest_sfx);
}

sub generate_tarball {
	my ($cls, $sys, $out_fh) = @_;
	my $dirs = $sys->get_target_dirs();

	# set up gzip stream on output
	binmode($out_fh, ':raw');
	my $gz_fh = IO::Compress::Gzip->new($out_fh, -Level => 9)
		or die "GZip error while opening stream: $IO::Compress::Gzip::GzipError";

	# write tar bundle into gzip stream (into output);
	# tar formed like "cd `dirname $bundle_root` && tar zcf - $bundle_root"
	my $tar = Archive::Tar->new();

	for my $bundle_rel (@$dirs) {
		my $bundle_root = rel2abs($bundle_rel);

		my $add_tar_file = sub {
			return unless -f $_ || -d _ || -l _;

			local $/; # slurp
			my $fh;
			my $rel_file = abs2rel($_, dirname($bundle_root));
			if (-l $_) {
				unless (-f _ || -d _) {
					# target cannot possibly be added
					warn "skipping non-file/directory symlink to provisioner: $_";
					return;
				}
				$tar->add_data($rel_file, readlink $_, { type => SYMLINK })
					or warn "Adding symlink $_ to provisioner: ".$tar->error;
			} elsif (-d _) {
				$tar->add_data($rel_file, '', { type => DIR });
			} elsif (-z _) {
				$tar->add_data($rel_file, '', { size => 0 });
			} elsif (open($fh, '<:raw', $_)) {
				$tar->add_data($rel_file, <$fh>)
					or die "Adding file $rel_file to provisioner: ".$tar->error;
				close $fh;
			} else {
				warn "skipping adding $_ to provisioner due to open error: $^E";
			}
		};
		find({ wanted => $add_tar_file, no_chdir => 1 }, $bundle_root);
	}

	# Finalize tar/gzip data
	$tar->write($gz_fh);
	undef $tar;
	# old Archive::Tar's always closed their handle
	if (! ($Archive::Tar::VERSION =~ /^1\.\d{2}$/ && $Archive::Tar::VERSION < 1.60)) {
		close($gz_fh) or warn "Closing gzip handle: $!";
	}
}

sub generate_provisioner {
	my ($cls, $sys, $out_fh) = @_;

	binmode($out_fh, ':unix:utf8');
	$cls->generate_guest_stub($sys, $out_fh);
	$cls->generate_tarball($sys, $out_fh);
}


sub main {
	my ($cls, $argv) = @_;
	my $out_fh = \*STDOUT;
	my $sys = $cls->parse_cmdline($argv, \$out_fh);

	$cls->generate_provisioner($sys, $out_fh);
}

1;
}
{
	BEGIN {
		my $mod_tail = join('/', split(/::/, "App::FedoraPack::System::Debian.pm"));
		$::INC{$mod_tail} = $0;
	}
package App::FedoraPack::System::Debian;

use 5.010;
use mro 'c3';
use strict;
use warnings;

use base qw(App::FedoraPack::System);
__PACKAGE__->register('debian', [ qw(7 wheezy 8 jessie) ]);


sub new {
	my $mod = shift;
	my $self = $mod->SUPER::new(@_);

	return $self unless $self->{system} eq 'debian';

	# normalize version
	if ($self->{version} !~ /^\d+$/) {
		$self->{version} = 7 if $self->{version} eq 'wheezy';
		$self->{version} = 8 if $self->{version} eq 'jessie';
	}

	if ($self->{version} !~ /^\d+$/) {
		die "Unrecognized Debian version: $self->{version}";
	}

	return $self;
}


sub make_install_cmd {
	my ($self, $pkgset) = @_;
	return join("\n",
		'export DEBIAN_FRONTEND=noninteractive',
		# Ubuntu doesn't keep security updates at time T on mirrors forever, so if
		# we have an AMI built at T, and ask to install stuff, it may not be
		# possible (without this update) if a stale security update is the latest
		# in the local cache.  (This actually did happen to me once.)
		'sudo apt-get -q -y update',
		# install through aptitude so we can use -R (--without-recommends)
		'command -v aptitude >/dev/null 2>&1 || sudo apt-get -q -y install aptitude',
		"sudo aptitude -q -y -R install @$pkgset",
	);
}


sub _provides_perl {
	my ($self) = @_;

	return 5.20 if $self->{version} >= 8;
	return 5.14;
}

sub _pkgs_perl {
	return [ qw(perl cpanminus liblocal-lib-perl carton) ];
}


sub _provides_php {
	my ($self) = @_;

	return 5.6 if $self->{version} >= 8;
	return 5.4;
}

sub _pkgs_php {
	return [ qw(php5-cli curl php5-curl) ];
}


sub _provides_python2 {
	return 2.7;
}

sub _pkgs_python2 {
	my ($self) = @_;
	my $venv = $self->{version} >= 8 ? 'virtualenv' : 'python-virtualenv';
	return [ qw(python python-pip), $venv ];
}

sub _provides_python3 {
	my ($self) = @_;
	return 3.4 if $self->{version} >= 8;
	return 3.2;
}

sub _pkgs_python3 {
	my ($self) = @_;
	my $venv = $self->{version} >= 8 ? 'virtualenv' : 'python3-virtualenv';
	return [ qw(python3 python3-pip), $venv ];
}

1;
}
{
	BEGIN {
		my $mod_tail = join('/', split(/::/, "App::FedoraPack::System::Fedora.pm"));
		$::INC{$mod_tail} = $0;
	}
package App::FedoraPack::System::Fedora;

use 5.010;
use mro 'c3';
use strict;
use warnings;

use base qw(App::FedoraPack::System);
__PACKAGE__->register('fedora', [ qw(20 21) ]);

sub _provides_perl {
	my ($self) = @_;

	return 5.20 if $self->{version} >= 21;
	return 5.18;
}

sub _pkgs_perl {
	return [ qw(perl perl-core perl-App-cpanminus perl-local-lib) ];
}

sub feature_perl {
	my $self = shift;
	$self->add_scripts('cpanm -n -S carton');
	$self->SUPER::feature_perl(@_);
}


sub _provides_php {
	my ($self) = @_;

	return 5.6 if $self->{version} >= 21;
	return 5.5;
}

sub _pkgs_php {
	return [ qw(php-cli) ];
}


sub _provides_python2 {
	return 2.7;
}

sub _pkgs_python2 {
	return [ qw(python python-virtualenv python-pip) ];
}

sub _provides_python3 {
	my ($self) = @_;

	return 3.4 if $self->{version} >= 21;
	return 3.3;
}

sub _pkgs_python3 {
	return [ qw(python3 python3-pip) ];
}

1;
}
{
	BEGIN {
		my $mod_tail = join('/', split(/::/, "App::FedoraPack::System::AmazonLinux.pm"));
		$::INC{$mod_tail} = $0;
	}
package App::FedoraPack::System::AmazonLinux;

use 5.010;
use mro 'c3';
use strict;
use warnings;

use base qw(App::FedoraPack::System::Fedora);
__PACKAGE__->register('amazon', [ qw(2014.09) ]);
__PACKAGE__->register_feature('epel', 'enable_epel');

sub _provides_perl {
	return 5.16;
}


sub _provides_php {
	return 5.5; # highest version in repo
}

sub _pkgs_php {
	return [ qw(php55-cli) ];
}


sub _provides_python2 {
	return 2.7;
}

sub _pkgs_python2 {
	return [ qw(python27 python27-pip) ];
}

sub feature_python2 {
	my $self = shift;
	$self->add_scripts('sudo pip install virtualenv');
	$self->SUPER::feature_python2(@_);
}


sub _provides_python3 {
	return 0;
}


sub enable_epel {
	my ($self) = @_;
	my $script = <<'BASH';
out=`mktemp -t "epel-$$-XXXXXXXX.repo"`
awk -F= </etc/yum.repos.d/epel.repo >"$out" '
	BEGIN { in_epel=0 }
	/^\[/ { in_epel=0 }
	/^\[epel\]/ { in_epel=1 }
	in_epel=1 && $1 == "enabled" { $0="enabled=1" }
	1'
sudo cp "$out" /etc/yum.repos.d/epel.repo
BASH
	$self->add_pre_scripts($script);
}

1;
}
{
	BEGIN {
		my $mod_tail = join('/', split(/::/, "App::FedoraPack::System::Ubuntu.pm"));
		$::INC{$mod_tail} = $0;
	}
package App::FedoraPack::System::Ubuntu;

use 5.010;
use mro 'c3';
use strict;
use warnings;

use base qw(App::FedoraPack::System::Debian);
__PACKAGE__->register('ubuntu', [ qw(14.04 trusty 14.10 utopic) ]);

sub new {
	my $mod = shift;
	my $self = $mod->SUPER::new(@_);

	return $self unless $self->{system} eq 'ubuntu';

	# normalize version
	if ($self->{version} !~ /^[.\d]+$/) {
		$self->{version} = '14.04' if $self->{version} eq 'trusty';
		$self->{version} = '14.10' if $self->{version} eq 'utopic';
	}

	if ($self->{version} !~ /^\d{2}\.\d{2}$/) {
		die "Unrecognized Ubuntu version: $self->{version}"
	}

	return $self;
}


sub _provides_perl {
	my ($self) = @_;

	return 5.20 if $self->{version} >= 14.10;
	return 5.18;
}

sub _provides_php {
	my ($self) = @_;

	return 5.5;
}

sub _provides_python2 {
	return 2.7;
}

sub _pkgs_python2 {
	return [ qw(python python-pip python-virtualenv) ];
}

sub _provides_python3 {
	return 3.4;
}

sub _pkgs_python3 {
	return [ qw(python3 python3-pip python3-virtualenv) ];
}


1;
}

{
	package main;

	BEGIN {
		if (! exists($INC{'App/FedoraPack/cli.pm'})) {
			# TODO: recursively enumerate *.pm modules in BFS under $FB::Bin and use
			# them all, instead of hardcoding the leaves
			eval <<EVAL;
			use lib \$FindBin::Bin;
			use App::FedoraPack::cli;
			use App::FedoraPack::System::Ubuntu;
			use App::FedoraPack::System::AmazonLinux;
EVAL
		}
	}

	App::FedoraPack::cli->main(\@ARGV);
}

__END__

=head1 NAME

make-provisioner - create Packer shell provisioners for Linux guests

=head1 SYNOPSIS

	# the minimal command
	make-provisioner --system-ubuntu=utopic --exec=main.sh ../bundle
	
	# include some other languages, specify exec language explicitly;
	# this will invoke bundle/provision.py in the guest
	make-provisioner --system-fedora=20 --python3 --perl --php \
		--exec=python3,provision.py ../bundle

=head1 DESCRIPTION

B<make-provisioner> builds a Packer shell provisioner based on some files in
the host filesystem, for use with a supported Linux guest.

The source tree must contain at least one driver script (defined by the
I<--exec> option), and optionally, a collection of other files that the driver
needs to do its job.

All these are packed together into a gzip-compressed tar archive as the
payload of a self-extracting bash script.  Upon being used as a provisioner,
the tarball is extracted again, and the driver script launched inside the
guest system.

By the time the provisioner is run, any known features (such as languages,
extra repos, or similar) defined by the guest packages and requested as
options during the run of B<make-provisioner> are already added.

=head1 SUPPORTED GUESTS

=over 4

=item Debian: 7.x (wheezy) - 8.x (jessie)

Chosen using I<--system-debian=8> style, or I<--system-debian=jessie>.

=item Ubuntu: 14.04 LTS (Trusty Tahr) - 14.10 (Utopic Unicorn)

Chosen using I<--system-ubuntu=14.04> style, or I<--system-ubuntu=trusty>.

=item Fedora: 20 - 21

Chosen using I<--system-fedora=21> style.

=item Amazon Linux: 2014.09

The Amazon Linux AMI.  As this distribution has a rolling release, only the
latest version at the time of fedora-pack's release is supported.  The version
is, however, still required.

Chosen using I<--system-amazon=2014.09>, or without using the version, as
I<--system-amazon>.  However, the latter style will not produce an error if
fedora-pack does not support the desired/current Amazon Linux release.

Local option: I<--epel> will enable the EPEL repo for packages.  By default,
only the base repo is enabled.

=back

=head1 SUPPORTED FEATURES

The base B<fedora-pack> system supports the following features to pre-install.
All features currently described here take an optional version as well, to
require a minimum version of the language.  E.g. C<--perl 5.16> will fail on
Debian Wheezy, which only provides 5.14, while it will succeed on Ubuntu
Utopic, which provides 5.20.

=over 4

=item bash

The Bourne-Again Shell.  This is already installed on all supported guests,
but provided for completeness.  It is automatically included (and invoked on)
C<--exec> scripts ending in I<.sh>.

=item perl

The Perl 5 language, with I<cpanm>, I<carton>, and I<local::lib> also
installed.  It is invoked for scripts ending in I<.pl>.

=item php

The PHP language, with I<composer> installed as C</usr/bin/composer>.  It is
invoked for scripts ending in I<.php>.

=item python2 and python3

The 2.x and 3.x versions of the Python language, respectively, with I<pip> and
I<virtualenv>.

Scripts ending in I<.py> are ambiguous; while they are currently invoked with
Python 2, B<this may change in the future.>  It is safest to invoke them using
an specified language, as in C<--exec=python3,path/to/script.py>.

=back

=head1 SEE ALSO

L<http://packer.io/>, L<http://docker.io>

(This has little to do with Docker, but you may find it suits your needs
better than Packer.)

=cut


__DATA__
#!/usr/bin/env bash
[ -z $FEDORAPACK_DEBUG ] || set -x
set -e

# find ourselves
self_file="$0"
[ -e "$self_file" ] || self_file="$(which "$self_file")"
cut_line=$(( `grep -an '^#END_STAGE1$' "$self_file" | cut -d: -f1` + 1 ))
if [ "$cut_line" -le 1 ] ; then
	echo "Cannot find '#END_STAGE1' line - extraction failed" >&2
	exit 1
fi

# make absolute
[ "$(echo "$self_file" | cut -c1)" == / ] || \
	self_file="$(pwd -P)/$self_file"

# exec payloads in workdir
sudo install -d -m 0700 -o `id -un` -g `id -gn` /var/local/fedora-pack
cd /var/local/fedora-pack
@PACKAGE_SCRIPT@

tail -n +$cut_line "$self_file" | tar zxf -
cd @TAR_TOPDIR@
exec @RUNNER@ `pwd`

# Magic token so that we don't hardcode any line-numbers.
#END_STAGE1
