#!/usr/bin/env perl

# https://github.com/sapphirecat/fedora-pack
#
# Self-extracting Packer shell provisioners for Fedora Cloud
# Copyright (C) 2014 Sapphire Cat <https://github.com/sapphirecat>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use 5.010;
use strict;
use warnings;

# Fedora versions handled by this script's runner classes
our $MIN_KNOWN_VERSION = 20;
our $MAX_KNOWN_VERSION = 20;

# All languages that can be handled; registered by the runner classes
our %LANGUAGES = ();

# Path to bundled files in the self-extractor's tarball.  In the future, we
# MAY pack additional data for the self-extractor to use without risk of our
# new names clashing with entries inside the user's bundle directory.
our $TAR_TOPLEVEL_DIR = 'pack';

# LAYOUT:
#
# - a bunch of Runner::* classes that provide the precise details, for each
#   supported language_version + fedora_version combination.  They're using
#   the 'base' module because 'parent' didn't get into core Perl until 5.10.1.
#
# - a MultiRunner that can handle installing multiple languages (but you still
#   only get to have *one* primary script for your provisioner.)  We'll
#   actually use this one later to cover all @bundle_langs.
#
# - package main, that gets information from the runners and builds the
#   bundle.  (Runners are invoked guest-side to do the _actual_ instance
#   customization; the provisioner built here only installs the language, and
#   desirable dependency/build tools such as bundler and rake for Ruby.)



package Runner;

use File::Spec::Functions qw(catdir catfile splitpath);
use Scalar::Util qw(blessed);

sub _register {
	# Bind SomeClass::X[::Y] as a provider of language X.
	# Or if it does't fit that template, class X itself.
	my $cls = shift;
	die "You should call __PACKAGE__->_register while loading your module" if ref $cls;
	if ($cls =~ /^[^:]+::([^:]+)/) {
		$::LANGUAGES{$1} = $cls;
	} else {
		$::LANGUAGES{$cls} = $cls;
	}
	return $cls;
}


sub new {
	my ($cls, $fedora_ver, $scriptpath) = @_;
	my $self = {
		version => $fedora_ver,
		script => $scriptpath,
	};
	bless $self, $cls;
}

sub verify {
	my $self = shift;
	my $rootdir = shift;
	my (undef, $dirs, $file) = splitpath($self->{script});
	my $target = catfile(catdir($rootdir, $dirs), $file);
	return "Runner $target is a symlink" if -l $target;
	return "Runner $target is not a file" unless -f $target;
	return '';
}


sub get_sh_cmd {
	my $self = shift;
	my $cls = blessed($self);
	die "get_sh_cmd must be called on an object instance, not $self" unless $cls;

	# Default: the 2nd-level package name, e.g. X in Runner::X or MyRun::X::Y.
	# Side-by-side language installs will override (e.g. "python2" -> "python")
	# If the class name desn't have a second-level instance, return the whole
	# thing.
	return ($cls =~ /\A[^:]+::([^:]+)/) ? $1 : $cls;
}

sub get_script {
	return shift->{script};
}

sub get_install_packages {
	return ();
}

sub get_post_install_script {
	return '';
}


sub create_setup_script {
	my ($self, $script, $mapper) = @_;
	$mapper ||= $self;

	$script =~ s/\@TAR_TOPDIR\@/$TAR_TOPLEVEL_DIR/g;

	if (my @pkgset = $mapper->get_install_packages) {
		my $pkgstr = join(' ', @pkgset);
		$script =~ s/\@PACKAGES\@/$pkgstr/g;
	} else {
		# No packages? Delete the yum line entirely. Note the /m flag!
		$script =~ s/^.*\@PACKAGES\@.*$//gm;
	}

	my $post_sh = $mapper->get_post_install_script // '';
	$script =~ s/\@POST_SH\@/$post_sh/g;
	undef $post_sh;

	my $run_cmd = join(' ',
		map { s/'/'\\''/g; "'$_'" } ($mapper->get_sh_cmd, $mapper->get_script));
	$script =~ s/\@RUNNER\@/$run_cmd/g;
	return $script;
}


package MultiRunner;
use Scalar::Util qw(blessed);

sub new {
	my $cls = shift;
	my $primary = shift;
	my $self = {
		seen => { blessed($primary) => 1 },
		order => [ $primary ],
		primary => $primary,
		script => $primary->{script},
	};
	my $obj = bless $self, $cls;
	$obj->add(@_) if @_;
	return $obj;
}

sub add {
	my $self = shift;
	for my $runner (@_) {
		my $lang = blessed($runner);
		unless ($self->{seen}{$lang}) {
			push(@{$self->{order}}, $runner);
			$self->{seen}{$lang} = 1;
		}
	}
	return $self;
}

sub set_primary {
	my ($self, $runner, $script_name) = @_;
	$self->add($runner);
	$self->{primary} = $runner;
}


sub verify {
	my $self = shift;
	$self->{primary}->verify;
}


sub get_install_packages {
	my $self = shift;
	return map { ($_->get_install_packages) } @{ $self->{order} };
}

sub get_post_install_script {
	my $self = shift;
	return join("\n", map { ($_->get_post_install_script) } @{ $self->{order} });
}

sub get_sh_cmd {
	my $self = shift;
	die "Cannot build guest script without primary runner" unless $self->{primary};

	my $main_runner = $self->{primary};
	return $main_runner->get_sh_cmd;
}

sub get_script {
	my $self = shift;
	return $self->{primary}->get_script;
}


sub create_setup_script {
	my ($self, $script, $info_source) = @_;
	$self->{primary}->create_setup_script($script, $info_source || $self);
}


package Runner::bash;
use base 'Runner';
__PACKAGE__->_register;


package Runner::perl;
use base 'Runner';
__PACKAGE__->_register;

sub get_install_packages {
	return qw(perl perl-core perl-App-cpanminus perl-local-lib);
}

sub get_post_install_script {
	return 'cpanm Carton';
}


package Runner::php;
use base 'Runner';
__PACKAGE__->_register;

sub get_install_packages {
	return 'php-cli';
}

sub get_post_install_script {
	return <<SCRIPT;
curl -LSs https://getcomposer.org/installer | php -- - --install-dir=/usr/bin
SCRIPT
}

package Runner::pear;
use base 'Runner::php';
__PACKAGE__->_register;

sub get_sh_cmd {
	return 'php';
}

sub get_install_packages {
	my $self = shift;
	return ($self->SUPER::get_install_packages, 'php-pear');
}

sub get_post_install_script {
	return ''; # restore the default (don't install composer)
}


package Runner::python;
use base 'Runner';
use File::Spec::Functions qw(catdir catfile);

sub verify {
	my $self = shift;
	my $rootdir = shift;
	# python can run directories that contain __main__.py as well as files
	# but, we can't check inside zip files because Archive::Zip isn't in core,
	# so we hope the user did it right in that case.
	my $target = catdir($rootdir, $self->{script});
	return '' if -d $target && -f catfile($target, '__main__.py');
	return $self->SUPER::verify(@_);
}

package Runner::python2;
use base 'Runner::python';
__PACKAGE__->_register;

sub get_sh_cmd {
	return 'python';
}

sub get_install_packages {
	return qw(python python-virtualenv python-pip);
}

package Runner::python3;
use base 'Runner::python';
__PACKAGE__->_register;

sub get_install_packages {
	return qw(python3 python3-pip);
}

sub get_post_install_script {
	return 'python3-pip install virtualenv';
}


package Runner::ruby;
use base 'Runner';
__PACKAGE__->_register;

sub get_install_packages {
	return qw(ruby rubygem-bundler rubygem-bundler_ext rubygem-rake);
}


package main;

use Archive::Tar ();
use Archive::Tar::Constant qw(FILE SYMLINK);
use Cwd qw(abs_path);
use File::Basename qw(basename dirname);
use File::Find qw(find);
use File::Spec::Functions qw(catfile abs2rel file_name_is_absolute);
use Getopt::Long qw(GetOptions);
use IO::Compress::Gzip ();
use List::Util qw(max);

# There's a stage1 script in the DATA filehandle that the Runner::X classes
# fill out.  The main script knows what languages exist because it defined
# %LANGUAGES at the start, and the runners use Runner->_register to enter
# themselves into that hash.
#
# When instantiated (based on command-line args), Runner::X classes receive
# the Fedora version in new(), so they can handle the vagaries of running
# language X on the specific Fedora version themselves.
#
# In fact, the Runner hierarchy is set up to allow for Fedora::python2::v20_23
# and Fedora::python2::v24 should Fedora seriously change how python2 works in
# version 24.
#
# TODO: package all downloadables with fedora-pack and include them inside the
# provisioner when their language is selected.  "Your build process should not
# download random pieces of the Internet."
#
# Stuff to handle, then:
# - Carton (via minicpan)
# - composer (easy: it's one file)
# - python3-pip virtualenv


sub usage (;$$) {
	my ($msg, $code) = @_;
	my $base = basename($0);
	$code //= 2;

	if ($msg) {
		select STDERR;
		print "Error: ", $msg, "\n\n" if $msg;
	}

	print <<USAGE;
Usage: $base [--fedora$MIN_KNOWN_VERSION] {--perl|--php|...}+ [--output=FILE] DIR

Create a provisioning script for the Fedora Cloud image.  Requested languages
are installed from yum; languages strive to include native base libraries such
as Carton or composer.phar.  The tree given by DIR is bundled and packed into
a single self-extracting file.

All languages accept a "runner" as argument, but only one runner may be
provided.  The runner must be given as relative to DIR.  The runner will be
invoked inside the Fedora environment, with the path to the unpacked root as
its first and only argument.

If a Fedora version is not specified, the highest known version will be used.

USAGE

	my $langs = {};
	print "Known Fedora versions:";
	print " $_" for $MIN_KNOWN_VERSION..$MAX_KNOWN_VERSION;
	print "\n\nKnown languages:";
	print " $_" foreach sort(keys %::LANGUAGES);
	print "\n\n";

	exit $code;
}

sub resolve_script ($$) {
	my ($rootpath, $script) = @_;

	my $is_valid = sub {
		return 0 if file_name_is_absolute($_[0]);
		return -e catfile($rootpath, $_[0]);
	};

	# If it's already relative to the root, return it immediately.
	return $script if $is_valid->($script);

	# See if it's an absolute path or relative-to-CWD path that points into the
	# root.  If so, return the relative-to-the-root conversion of that path.
	my $rel_script = abs2rel($script, $rootpath);
	return $rel_script if $is_valid->($rel_script);

	# Try to give out unambiguous (if possibly confusing) diagnostics.
	die "Path $script does not seem to be under $rootpath" if -e $script;
	die "Path $script not found (neither from CWD nor in $rootpath)";
}

sub runner_for_lang ($$;$) {
	my $lang = shift;
	my $rv = eval {
		my $pkg = "Runner::$lang";
		$pkg->new(@_);
	};
	die $@ || "Could not find a runner for language: $lang" unless $rv;
	return $rv;
}



# CLI structure is:
#   make-provisioner --fedoraVER [--output=FILE] {--language[=PATH]}+ bundle_path
#
# Languages handle their script paths so Python can recognize either =script or =dir_w_main_py
#
# There MUST be one bundle path.  Scripts MUST be relative to this path.  One
# script MUST be given, and there MUST be only one script.
#
# If you want to knit together a complex tree or run multiple child scripts,
# do that in your local build process or from a stub runner script.

# getopt_spec: input to GetOptions
# options: output of GetOptions
# bundle_root: path to tree to archive
# bundle_langs: languages to be included in the bundle
# scripts: runner script candidates (MUST be exactly 1 after processing)
my ($options, @getopt_spec);
my ($bundle_root, @bundle_langs, @scripts);

$options = {
	output => 'provisioner.sh',
};
@getopt_spec = (
	'output:s'
);
for my $version ($MIN_KNOWN_VERSION..$MAX_KNOWN_VERSION) {
	$options->{"fedora$version"} = 0;
	push(@getopt_spec, "fedora$version");
}
for my $language (keys %LANGUAGES) {
	$options->{$language} = 0;
	push(@getopt_spec, "$language:s");
}

GetOptions($options, @getopt_spec);
undef @getopt_spec;


# get/check bundle path
if (! @ARGV) {
	usage("A path to bundle must be specified.");
} elsif (@ARGV > 1) {
	usage("Only one path to bundle is supported.");
} elsif (! -d $ARGV[0]) {
	usage("Path to bundle is not a directory.");
} else {
	$bundle_root = abs_path($ARGV[0]);
}

# gather requested languages and runner scripts
for my $language (keys %LANGUAGES) {
	next unless $options->{$language};
	push(@bundle_langs, $language);
	my $lang_arg = $options->{$language};
	if ($lang_arg ne '1' && -e catfile($bundle_root, $options->{$language})) {
		push(@scripts, [$language, $lang_arg]);
	}
}

# get fedora version arg, or default to latest
my @iso_version = map { /^fedora(\d+)$/ ? ($1) : () } keys %$options;
if (@iso_version > 1) {
	usage("Only one Fedora version can be used.");
} elsif (! @iso_version) {
	# check if Getopt left behind a --fedora2 arg or something
	my @bad_versions = grep { /^--fedora\d+/ } @ARGV;
	usage("Unknown Fedora version requested: @bad_versions") if @bad_versions;

	# no version specified at all, safe to default it.
	@iso_version = ($MAX_KNOWN_VERSION);
}

# check languages/scripts
if (! @bundle_langs) {
	usage("No languages were specified to bundle.");
} elsif (! @scripts) {
	usage("No runner script for any language was provided.");
} elsif (@scripts > 1) {
	usage("Only one runner script is supported.");
}



# check that the runner is inside the bundle tree (and exists)
# and further, rework the runner to be relative to the bundle root
my $script_rel_path = eval { resolve_script($bundle_root, $scripts[0][1]) };
usage($@ || "Could not resolve script relative to bundle dir") unless $script_rel_path;

# get a runner for the script and check that it accepts the path
my $primary_runner = runner_for_lang($scripts[0][0],
	$iso_version[0], $script_rel_path);
my $err = $primary_runner->verify($bundle_root);
die $err if defined($err) && length($err);

# get an uber-runner that links together all of @bundle_langs
my $runner = MultiRunner->new($primary_runner);
$runner->add(map { runner_for_lang($_, $iso_version[0]) } @bundle_langs);

# load the guest's self-extracting script from <DATA> and replace all the
# placeholders with data from all runners to be bundled
my $guest_sfx = do {
	local $/;
	$runner->create_setup_script(<DATA>);
};
close DATA;


# start up output stream
my $out_fh = \*STDOUT;
if ($options->{output} ne '-') {
	open($out_fh, '>', $options->{output})
		or die "Can't open output file $options->{output}: $!";
}

# write sfx to output
print $out_fh $guest_sfx;
undef $guest_sfx;

# set up gzip stream on output
binmode($out_fh, ':raw');
my $gz_fh = IO::Compress::Gzip->new($out_fh, -Level => 9, Minimal => 1)
	or die "GZip error while opening stream: $IO::Compress::Gzip::GzipError";

# write tar bundle into gzip stream (into output);
# tar formed like "cd `dirname $bundle_root` && tar zcf - $bundle_root"
chdir(dirname($bundle_root))
	or die "Can't cd to directory above $bundle_root: $!";
$Archive::Tar::DO_NOT_USE_PREFIX = 'true';
my $tar = Archive::Tar->new();

# Archive::Tar doesn't let us pass it a filename to be added under a different
# name.  To do this without disturbing our CWD, we have to walk the tree
# ourselves.  (Avoiding chdir may be a self-imposed challenge, though.)
my $add_tar_file = sub {
	return unless -f $_;

	local $/; # slurp
	my $fh;
	my $rel_file = abs2rel($_, $bundle_root);
	my $tar_name = catfile($TAR_TOPLEVEL_DIR, $rel_file);
	if (-l $_) {
		$tar->add_data($tar_name, readlink $_, { type => SYMLINK })
			or warn "Adding symlink $_: ".$tar->error;
	} elsif (open($fh, '<:raw', $_)) {
		$tar->add_data($tar_name, <$fh>)
			or die "Adding file $rel_file ($_): ".$tar->error;
		close $fh;
	} else {
		warn "skipping $_ due to open error: $!";
	}
};
find({ wanted => $add_tar_file, no_chdir => 1 }, $bundle_root);

# Push the tar data down to gzip.
$tar->write($gz_fh);

# Pack up and go home.
undef $tar;
close($gz_fh) or warn "Closing gzip handle: $!";
close(STDOUT) or warn "Closing stdout: $!";
exit 0;

# Guest stage1 provisioner to follow, added by `make` rule.
#
# Stage1's role is to set up enough environment so that the designated runner
# can run (e.g.: yum install ...) in the guest, then unpack the bundled root
# and invoke the runner within.
#
# See: src/make-provisioner/guest.sh
__DATA__
#!/bin/bash
[ -z $FEDORAPACK_DEBUG ] || set -x
set -e

self_file="$0"
[ -e "$self_file" ] || self_file="$(which "$self_file")"
cut_line=$(( `grep -an '^#END_STAGE1$' "$self_file" | cut -d: -f1` + 1 ))
if [ "$cut_line" -le 1 ] ; then
	echo "Cannot find '#END_STAGE1' line - extraction failed" >&2
	exit 1
fi

yum -q -y install @PACKAGES@
@POST_SH@

cd `mktemp -d -t fedorapack.XXXXXXXX`
tail -n +$cut_line "$self_file" | tar zxf -
cd @TAR_TOPDIR@
exec @RUNNER@ `pwd`

# Magic token so that we don't hardcode any line-numbers.
#END_STAGE1
